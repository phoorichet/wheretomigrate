<!-- left panel -->
<div class="panel panel-primary" id="panel-main">
  <div class="panel-heading">
    MigrantHeaven
   <span id="toggle-panel-body" class="glyphicon glyphicon-chevron-up pull-right"></span>
  </div>
  <div class="panel-body">
    <div class="row row-padding">
      Which factor would you like to consider?
    </div>
    <div class="row row-padding">
      <form id="main-view-factor">
        <select name="factorList" onchange="getData(this.value)" class="form-control">
          <option value="jobs_cities">Job openings</option>
          <option value="cost_livings">Cost of livings</option>
          <option value="crimes">Crime rates</option>
          <optgroup label="Races">
            <option value="race_bangladeshi">Bangladeshi</option>
            <option value="race_bhutanese">Bhutanese</option>
            <option value="race_burmese">Burmese</option>
            <option value="race_cambodian">Cambodian</option>
            <option value="race_chinese">Chinese</option>
            <option value="race_filipino">Filipino</option>
            <option value="race_hmong">Hmong</option>
            <option value="race_indian">Indian</option>
            <option value="race_indonesian">Indonesian</option>
            <option value="race_japanese">Japanese</option>
            <option value="race_korean">Korean</option>
            <option value="race_laotian">Laotian</option>
            <option value="race_malaysian">Malaysian</option>
            <option value="race_nepalese">Nepalese</option>
            <option value="race_pakistani">Pakistani</option>
            <option value="race_srilankan">Sri Lankan</option>
            <option value="race_taiwanese">Taiwanese</option>
            <option value="race_thai">Thai</option>
            <option value="race_vietnamese">Vietnamese</option>
          </optgroup>
        </select>
      </form>
    </div>
    <div class="row row-padding">
      Low
      <div id="legend_gradient"></div>
      High
    </div>
    <br/>
  </div><!-- end div.panel-body -->
</div><!-- end panel panel-primary -->

<!-- Right panel -->
<div class="panel panel-primary" id="panel-main-right"  ng-submit="submit()" ng-controller="CitySearchCtrl">
  <div class="panel-heading">
    <div class="row row-padding">
      <!-- Search form -->
      <form class="input-group">
          <input  ng-model="userType" type="text" class="form-control" title="Search for a city/county" placeholder="Enter a city or county">
          <span class="input-group-btn">
            <button class="btn btn-default" type="submit">
              <span class="glyphicon glyphicon-search"></span>
            </button>
          </span>
          <span id="toggle-panel-body-right" class="glyphicon glyphicon-chevron-down pull-right"></span>
      </form>
    </div>
  </div>
  <div class="panel-body">
    <div class="row">
      <tt>userType = {{userType}}</tt><br>  
      <tt>city = {{city}}</tt><br>  
      <tt>current city = {{current_city}}</tt><br>  
      <tt>list city = {{city_list}}</tt><br>  
    </div>
    <div class="row row-padding">
      <!-- Radar chart -->
      <div id="radar-body"></div>
      <div id="radar-chart"></div>
    </div>  
  </div><!-- end div.panel-body -->
</div><!-- end panel panel-primary -->

<div id="map-canvas"></div>
<div id="loading"><%= image_tag 'mf_progress_radar.gif', :alt => 'loading' %></div>

<script>

// Constants
var LATLNG_USA = new google.maps.LatLng(39.092969,-97.697296);
var MY_MAPTYPE_ID = 'custom_style';
var INIT_ZOOM_LEVEL = 5;
var MIN_ZOOM_LEVEL = 5;
var MAX_ZOOM_LEVEL = 8;
var ZOOM_TO_RADIUS = [0,0,0,0,0,20000,16000,9000,6000];
var FILL_OPACITY = 0.5;
var STROKE_OPACITY = 1;
var STROKE_WEIGHT = 0.5;

// Namespace for variables in Migrant Heaven project
window.MigrantHeaven = {};
window.MigrantHeaven.mapCircles = [];
window.MigrantHeaven.currentFactor = 'jobs_cities';

// Always pad zero to the hex conversion result
function toHex(input) {
  var result = input.toString(16);
  return (result.length < 2)?('0'+result):result;
}

// Convert 0-255 into hex 0x00-0xff
function toRGColor(input) {
  var reverse = (window.MigrantHeaven.currentFactor === 'crimes' || 
    window.MigrantHeaven.currentFactor === 'cost_livings');

  var c1 = (input<0.5)?255:Math.ceil(255*(1-input)/0.5);
  var c2 = (input<0.5)?Math.ceil(255*input/0.5):255;
  var red = (reverse)?c2:c1;
  var green = (reverse)?c1:c2;
  var result = '#'+toHex(red)+toHex(green)+'00';
  return result;
}

// Initialize function after the page is loaded
function initialize() {
  // Custom map style
  var featureOpts = [
    {
      // makes the map much simpler!
      featureType: 'poi', 
      stylers: [
        { visibility: 'off' },
      ]
    },
    {
      // remove annoying green things
      featureType: 'landscape.natural.landcover', 
      stylers: [
        { visibility: 'off' },
      ]
    },
    {
      // remove annoying green things
      featureType: 'landscape.natural.terrain', 
      stylers: [
        { visibility: 'off' },
      ]
    },
  ];
  window.MigrantHeaven.map = new google.maps.Map(document.getElementById('map-canvas'), {
    zoom: INIT_ZOOM_LEVEL,
    maxZoom: 9,
    minZoom: 5,
    center: LATLNG_USA,
    mapTypeControlOptions: {
      mapTypeIds: [google.maps.MapTypeId.ROADMAP, MY_MAPTYPE_ID]
    },
    mapTypeId: MY_MAPTYPE_ID
  });
  var styledMapOptions = {
    name: 'Custom Style'
  };
  var customMapType = new google.maps.StyledMapType(featureOpts, styledMapOptions);
  window.MigrantHeaven.map.mapTypes.set(MY_MAPTYPE_ID, customMapType);

  // Info window
  window.MigrantHeaven.infoWindow = new google.maps.InfoWindow();

  // Capture map zoom event to resize circles
  google.maps.event.addListener(window.MigrantHeaven.map, 'zoom_changed', function() {
    resizeCircles(window.MigrantHeaven.map.getZoom());
  });

  // Load first factor to view
  getData(window.MigrantHeaven.currentFactor);
}

// Get data from selected factor
function getData(factor_name) {
  // Show loading indicator
  $('#loading').fadeIn();

  // Change legend gradient
  if (factor_name === 'crimes' || factor_name === 'cost_livings') {
    $('#legend_gradient').removeClass('redToGreen');
    $('#legend_gradient').addClass('greenToRed');
  } else {
    $('#legend_gradient').removeClass('greenToRed');
    $('#legend_gradient').addClass('redToGreen');
  }

  // Remove previous circles. Show a loading indicator.
  // Hide the indicator and draw circles when data arrives.
  removeCircles();
  $.ajax({
    url: factor_name+".json",
    cache: false,
    success: function (data, textStatus, jqXHR) {
      drawCircles(data);
      $('#loading').fadeOut();
    },
    error: function (data, textStatus, jqXHR) {
      $('#loading').fadeOut();
    },
    dataType: 'json',
  });

  // Set current factor to global variable for later use
  window.MigrantHeaven.currentFactor = factor_name;
}

// Clear cluster markers
function removeCircles() {
  for (i=0; i<window.MigrantHeaven.mapCircles.length; i++) {
    window.MigrantHeaven.mapCircles[i].setMap(null);
  }
  window.MigrantHeaven.mapCircles = [];
}

// Resize circles when the map is zoomed
function resizeCircles(zoom_level) {
  var r;
  if (zoom_level >= ZOOM_TO_RADIUS.length)
    r = ZOOM_TO_RADIUS[ZOOM_TO_RADIUS.length-1];
  else
    r = ZOOM_TO_RADIUS[zoom_level];
  for (i=0; i<window.MigrantHeaven.mapCircles.length; i++) {
    window.MigrantHeaven.mapCircles[i].setRadius(r);
  }
}

// Draw circles
function drawCircles(data) {
  // Normalize raw data size to representing fillColor
  var maxSize = data[0].size;
  for (i=1; i<data.length; i++) {
    if (data[i].size > maxSize)
      maxSize = data[i].size;
  }
  var normalizedSize = [];
  for (i=0; i<data.length; i++) {
    normalizedSize[i] = data[i].size/maxSize;
  }

  for (i=0; i<data.length; i++) {
    // Draw device's position
    var latLng = new google.maps.LatLng(data[i].lat, data[i].lng)
    window.MigrantHeaven.mapCircles[i] = new google.maps.Circle({
      map: window.MigrantHeaven.map,
      strokeColor: toRGColor(normalizedSize[i]),
      strokeOpacity: STROKE_OPACITY,
      strokeWeight: STROKE_WEIGHT,
      fillColor: toRGColor(normalizedSize[i]),
      fillOpacity: FILL_OPACITY,
      center: latLng,
      radius: ZOOM_TO_RADIUS[INIT_ZOOM_LEVEL],
      position: latLng, // essential for infoWindow's position
      infoWindowHtml: data[i].html,
    });
    // Clicking on a circle activates an info window
    google.maps.event.addListener(window.MigrantHeaven.mapCircles[i], 'click', function() {
      console.log(this.center);
      window.MigrantHeaven.infoWindow.setContent(this.infoWindowHtml);
      window.MigrantHeaven.infoWindow.open(window.MigrantHeaven.map, this);
    });

  }
}

/* Initial Google Maps after the page is loaded */
google.maps.event.addDomListener(window, 'load', initialize);

</script>
