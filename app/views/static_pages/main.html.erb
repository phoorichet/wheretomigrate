
<div id="panel">
    <h1>Migrant Heaven</h1>
    <form id="mainForm">
      View factor:
      <select name="factorList" onchange="factorOnChange(this)">
        <option value="jobs_cities">Job openings</option>
        <option value="crime">Crime rates</option>
        <option value="cost_livings">Cost of livings</option>
        <optgroup label="Races">
          <option value="race_bangladeshi">Bangladeshi</option>
          <option value="race_bhutanese">Bhutanese</option>
          <option value="race_burmese">Burmese</option>
          <option value="race_cambodian">Cambodian</option>
          <option value="race_chinese">Chinese</option>
          <option value="race_filipino">Filipino</option>
          <option value="race_hmong">Hmong</option>
          <option value="race_indian">Indian</option>
          <option value="race_indonesian">Indonesian</option>
          <option value="race_japanese">Japanese</option>
          <option value="race_korean">Korean</option>
          <option value="race_laotian">Laotian</option>
          <option value="race_malaysian">Malaysian</option>
          <option value="race_nepalese">Nepalese</option>
          <option value="race_pakistani">Pakistani</option>
          <option value="race_srilankan">Sri Lankan</option>
          <option value="race_taiwanese">Taiwanese</option>
          <option value="race_thai">Thai</option>
          <option value="race_vietnamese">Vietnamese</option>
        </optgroup>
      </select>
      <div>
        Low
        <div id="legend_gradient"></div>
        High
      </div>
    </form>
</div>
<div id="map-canvas"></div>
<div id="loading"><%= image_tag 'mf_progress_radar.gif', :alt => 'loading' %></div>

<script>

  function toHex(input) {
      var result = input.toString(16);
      return (result.length < 2)?('0'+result):result;
  }

  function toRGColor(input) {
      var r = (input<0.5)?255:Math.ceil(255*(1-input)/0.5);
      var g = (input<0.5)?Math.ceil(255*input/0.5):255;
      var result = '#'+toHex(r)+toHex(g)+'00';
      return result;
  }

  var map;
  var data;
  var RADIUS = 11000;
  var RADIUS_RATIO = 4.0;
  var clusters = [];

  function initialize() {
    var initLatLng = new google.maps.LatLng(39.092969,-97.697296); // USA
    map = new google.maps.Map(document.getElementById('map-canvas'), {
      zoom: 5,
      center: initLatLng,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    google.maps.event.addListener(map, 'zoom_changed', function() {
      resizeClusters(map.getZoom());
    });

    getData("jobs_cities");
  }

  /* Get data from selected factor */
  function getData(factor_name) {

    // Show loading indicator
    $('#loading').fadeIn();

    // Change legend gradient
    if (factor_name === 'crime' || factor_name === 'cost_livings') {
      $('#legend_gradient').removeClass('redToGreen');
      $('#legend_gradient').addClass('greenToRed');
    } else {
      $('#legend_gradient').removeClass('greenToRed');
      $('#legend_gradient').addClass('redToGreen');
    }

    // Remove previous clusters. Show a loading indicator.
    // Hide the indicator and draw clusters when data arrives.
    removeClusters();
    $.ajax({
      url: factor_name+".json",
      cache: false,
      success: function (data, textStatus, jqXHR) {
        drawClusters(data);
        $('#loading').fadeOut();
      },
      error: function (data, textStatus, jqXHR) {
        $('#loading').fadeOut();
      },
      dataType: 'json',
    });

  }

  // Resize clusters when the map is zoomed
  function resizeClusters(zoom_level) {
    // var r = RADIUS*(RADIUS_RATIO/Math.pow(zoom_level,1.1));
    // var r = RADIUS*(RADIUS_RATIO*zoom_level);
    r = zoom_level;
    console.log(r);
    for (i=0; i<clusters.length; i++) {
      clusters[i].setRadius(r);
    }
    // alert(zoom_level);
  }

  // Clear cluster markers
  function removeClusters() {
    for (i=0; i<clusters.length; i++) {
      clusters[i].setMap(null);
    }
    clusters = [];
  }

  // Draw clusters
  function drawClusters(data) {
    for (var i=0; i<data.length; i++) {
      // Draw device's position
      clusters[i] = new google.maps.Circle({
        map: map,
        // strokeColor: '#000',
        // strokeOpacity: 1.0,
        strokeWeight: 0,
        // fillColor: COLOR_FILL,
        fillColor: toRGColor(data[i].size),
        fillOpacity: 1,
        center: new google.maps.LatLng(data[i].lat, data[i].lng),
        // radius: parseInt(data[i].size*MAX_RADIUS),
        radius: RADIUS,
      });

      // Info window
      var infowindow = new google.maps.InfoWindow({
        position: new google.maps.LatLng(data[i].lat, data[i].lng),
        content: clusters[i].html
      });
      google.maps.event.addListener(clusters[i], 'click', function() {
        infowindow.open(map,clusters[i]);
      });
    }
  }

  /* Initial Google Maps after the page is loaded */
  google.maps.event.addDomListener(window, 'load', initialize);

  function factorOnChange(f) {
    getData(f.value);
  }

</script>