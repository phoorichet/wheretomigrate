<div class="panel panel-primary" id="panel-main">
  <div class="panel-heading">
    Migrant Heaven
   <span id="toggle-panel-body" class="glyphicon glyphicon-chevron-up pull-right"></span>
  </div>
  <div class="panel-body">
    <div class="row row-padding">
      What do you want to consider?
    </div>
    <div class="row row-padding">
      <form id="main-view-factor">
        <select name="factorList" onchange="factorOnChange(this)" class="form-control">
          <option value="jobs_cities">Job openings</option>
          <option value="crimes">Crime rates</option>
          <option value="cost_livings">Cost of livings</option>
          <optgroup label="Races">
            <option value="race_bangladeshi">Bangladeshi</option>
            <option value="race_bhutanese">Bhutanese</option>
            <option value="race_burmese">Burmese</option>
            <option value="race_cambodian">Cambodian</option>
            <option value="race_chinese">Chinese</option>
            <option value="race_filipino">Filipino</option>
            <option value="race_hmong">Hmong</option>
            <option value="race_indian">Indian</option>
            <option value="race_indonesian">Indonesian</option>
            <option value="race_japanese">Japanese</option>
            <option value="race_korean">Korean</option>
            <option value="race_laotian">Laotian</option>
            <option value="race_malaysian">Malaysian</option>
            <option value="race_nepalese">Nepalese</option>
            <option value="race_pakistani">Pakistani</option>
            <option value="race_srilankan">Sri Lankan</option>
            <option value="race_taiwanese">Taiwanese</option>
            <option value="race_thai">Thai</option>
            <option value="race_vietnamese">Vietnamese</option>
          </optgroup>
        </select>
      </form>
    </div>
    <div class="row row-padding">
      Low
      <div id="legend_gradient"></div>
      High
    </div>
    <br/>
    <div class="row row-padding">
      <!-- Search form -->
      <div class="input-group">
        <input type="text" class="form-control" title="Search for a city/county" placeholder="Enter a city or county">
        <span class="input-group-btn"><button class="btn btn-primary" type="button"><span class="glyphicon glyphicon-search"></span></button></span>
      </div>
    </div>  
    <div class="row row-padding">
      <!-- Radar chart -->
      <div id="radar-body"></div>
      <div id="radar-chart"></div>
    </div>  
  </div><!-- end div.panel-body -->
</div><!-- end panel panel-primary -->

<div id="map-canvas"></div>
<div id="loading"><%= image_tag 'mf_progress_radar.gif', :alt => 'loading' %></div>

<script>

function toHex(input) {
  var result = input.toString(16);
  return (result.length < 2)?('0'+result):result;
}

function toRGColor(input) {
  var r = (input<0.5)?255:Math.ceil(255*(1-input)/0.5);
  var g = (input<0.5)?Math.ceil(255*input/0.5):255;
  var result = '#'+toHex(r)+toHex(g)+'00';
  return result;
}

var map;
var LATLNG_USA = new google.maps.LatLng(39.092969,-97.697296);
var MY_MAPTYPE_ID = 'custom_style';
var RADIUS = 11000;
var RADIUS_RATIO = 4.0;
var clusters = [];

function initialize() {
  var featureOpts = [
    // {
    //   elementType: 'geometry.fill',
    //   stylers: [
    //     { hue: '#ff0000' },
    //     { visibility: 'on' },
    //   ]
    // },
    {
      featureType: 'poi',
      stylers: [
        { visibility: 'off' },
      ]
    },
    {
      featureType: 'road.local',
      stylers: [
        { visibility: 'off' },
      ]
    },
    {
      featureType: 'landscape.natural.landcover',
      stylers: [
        { visibility: 'off' },
      ]
    },
    {
      featureType: 'landscape.natural.terrain',
      stylers: [
        { visibility: 'off' },
      ]
    },
  ];

  map = new google.maps.Map(document.getElementById('map-canvas'), {
    zoom: 5,
    center: LATLNG_USA,
    mapTypeControlOptions: {
      mapTypeIds: [google.maps.MapTypeId.ROADMAP, MY_MAPTYPE_ID]
    },
    mapTypeId: MY_MAPTYPE_ID
  });

  var styledMapOptions = {
    name: 'Custom Style'
  };

  var customMapType = new google.maps.StyledMapType(featureOpts, styledMapOptions);

  map.mapTypes.set(MY_MAPTYPE_ID, customMapType);

  // Map zoom event
  google.maps.event.addListener(map, 'zoom_changed', function() {
    resizeClusters(map.getZoom());
  });

    // Load first factor to view
    //getData("jobs_cities");
  }

  /* Get data from selected factor */
  function getData(factor_name) {

    // Show loading indicator
    $('#loading').fadeIn();

    // Change legend gradient
    if (factor_name === 'crime' || factor_name === 'cost_livings') {
      $('#legend_gradient').removeClass('redToGreen');
      $('#legend_gradient').addClass('greenToRed');
    } else {
      $('#legend_gradient').removeClass('greenToRed');
      $('#legend_gradient').addClass('redToGreen');
    }

    // Remove previous clusters. Show a loading indicator.
    // Hide the indicator and draw clusters when data arrives.
    removeClusters();
    $.ajax({
      url: factor_name+".json",
      cache: false,
      success: function (data, textStatus, jqXHR) {
        drawClusters(data);
        $('#loading').fadeOut();
      },
      error: function (data, textStatus, jqXHR) {
        $('#loading').fadeOut();
      },
      dataType: 'json',
    });

  }

  // Resize clusters when the map is zoomed
  // <=3: 35000, 4: 25000, 5: 15000, 6: 11000, 7: 6000, 8: 4000, >=9: 3000
  var zoomToRadius = [35000,35000,35000,35000,25000,15000,11000,6000,4000,3000];
  function resizeClusters(zoom_level) {
    var r;
    if (zoom_level > 9)
      r = zoomToRadius[zoomToRadius.length-1];
    else
      r = zoomToRadius[zoom_level];
    for (i=0; i<clusters.length; i++) {
      clusters[i].setRadius(r);
    }
  }

  // Clear cluster markers
  function removeClusters() {
    for (i=0; i<clusters.length; i++) {
      clusters[i].setMap(null);
    }
    clusters = [];
  }

  // Draw clusters
  function drawClusters(data) {

    for (var i=0; i<data.length; i++) {
      // Draw device's position
      clusters[i] = new google.maps.Circle({
        map: map,
        strokeColor: toRGColor(data[i].size),
        strokeOpacity: 1.0,
        strokeWeight: 1,
        fillColor: toRGColor(data[i].size),
        fillOpacity: 0.5,
        center: new google.maps.LatLng(data[i].lat, data[i].lng),
        radius: RADIUS,
      });

      // Info window
      var infowindow = new google.maps.InfoWindow({
        position: new google.maps.LatLng(data[i].lat, data[i].lng),
        content: clusters[i].html
      });
      google.maps.event.addListener(clusters[i], 'click', function() {
        infowindow.open(map,clusters[i]);
      });
    }
  }

  /* Initial Google Maps after the page is loaded */
  google.maps.event.addDomListener(window, 'load', initialize);

  function factorOnChange(f) {
    getData(f.value);
  }

  </script>
